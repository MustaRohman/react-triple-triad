{"version":3,"sources":["components/Card/index.js","components/Hand/index.js","components/Grid/index.js","components/Board/index.js","components/Game/cards.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","selected","owner","react_default","a","createElement","name","stats","element","Hand","cards","map","value","index","components_Card","player","turn","selectedIndex","key","Grid","row0","row1","row2","tiles","forEach","item","push","tileMode","Board","_React$Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","tileIndex","selectedCard","initKeyDownHandler","inherits","createClass","_this2","document","onkeydown","currentIndex","keyCode","grid","setState","onTileSelect","indexOf","console","log","gameInfo","totalCardsPlaced","player1Score","player2Score","components_Hand","player1Hand","side","components_Grid","player2Hand","React","Component","deck1","deck2","Game","player1Cards","slice","player2Cards","settings","combo","player1","score","hand","player2","handIndex","newState","card","splice","placeCardOnGrid","results","performCaptureOperation","opponentScore","neighbourCard","neighbourTileIndices","getNeighbourTileIndices","newScore","newOpponentScore","newGrid","capture","returnArray","Board_Board","App","Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e153e244.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./index.css\";\n\nfunction Card(props) {\n    // let className = (props.selected ? 'selected' : '') + ' card'\n    let className = '';\n    if (props.selected) {\n        className = props.owner ? 'player1' : 'player2';\n    }\n    className += ' card';\n    return (\n        <div className={className}>\n            <p className=\"header\">{props.name}</p>\n            <div className=\"description\">\n                <div className=\"stat-item-top\">{props.stats[0]}</div>\n                <div className=\"stat-item-middle\">\n                    <p>{props.stats[1]}</p>\n                    <p>{props.stats[2]}</p>\n                </div>\n                {/* <div className=\"stat-item-middle\">{props.stats[2]}</div> */}\n                <div className=\"stat-item-top \">{props.stats[3]}</div>\n            </div>\n            { props.element ? <div className=\"footer\">props.element</div> : null}\n        </div>\n    )\n}\n\nCard.propTypes = {\n    selected: PropTypes.bool,\n    owner: PropTypes.bool,\n    name: PropTypes.string,\n    stats: PropTypes.arrayOf(PropTypes.number),\n    element: PropTypes.string\n}\n\nexport default Card;\n\n","import React from \"react\";\nimport Card from \"../Card\";\nimport PropTypes from \"prop-types\";\n\nimport \"./index.css\";\n\nfunction Hand(props) {\n    let cards = props.cards.map((value, index) => {    \n        return <Card name={value.name} stats={value.stats} owner={value.player} selected={props.turn && props.selectedIndex === index} key={index}></Card>\n    })\n\n    return (\n        <div className=\"hand\">\n            {cards}\n        </div>\n    )\n}\n\nHand.propTypes = {\n    cards: PropTypes.arrayOf(PropTypes.object),\n    selectedIndex: PropTypes.number\n}\n\nexport default Hand;","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport \"./index.css\";\nimport Card from \"../Card\";\n\nfunction Grid(props) {\n    let row0 = [], row1 = [], row2 = [];\n    props.tiles.forEach((item, index) => {\n        if (index < 3) {\n            row0.push(\n                item ? <Card name={item.name} owner={item.player} selected={true} stats={item.stats} key={index}/> \n                : <div className={index === props.selectedIndex && props.tileMode ? 'blank-selected' : 'blank'} key={index}></div>\n            );\n        } else if (index < 6) {\n            row1.push(\n                item ? <Card name={item.name} owner={item.player} selected={true} stats={item.stats} key={index}/> \n                : <div className={index ===  props.selectedIndex &&  props.tileMode  ? 'blank-selected' : 'blank'} key={index}></div>\n            );\n        } else {\n            row2.push(\n                item ? <Card name={item.name} owner={item.player} selected={true} stats={item.stats} key={index}/> \n                : <div className={index ===  props.selectedIndex &&  props.tileMode ? 'blank-selected' : 'blank'} key={index}></div>\n            );\n        }\n    });       \n    return (\n        <div className=\"grid\">\n            <div className=\"row\">\n                {row0}\n            </div>\n            <div className=\"row\">\n                {row1}\n            </div>\n            <div className=\"row\">\n                {row2}\n            </div>\n        </div>\n    )\n}\n\nGrid.propTypes = {\n    tiles: PropTypes.array,\n    tileMode: PropTypes.bool,\n    selectedIndex: PropTypes.number\n}\nexport default Grid;\n","import React from \"react\";\nimport Hand from \"../Hand\";\n\nimport \"./index.css\";\nimport Grid from \"../Grid\";\n\nexport class Board extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            selectedIndex: 3,\n            tileIndex: 8,\n            tileMode: false,\n            selectedCard: null\n        }        \n        this.initKeyDownHandler();\n    }\n\n    initKeyDownHandler() {\n        document.onkeydown = (key) => {\n            let currentIndex = this.state.selectedIndex;\n\n            switch(key.keyCode) {\n                case 37: {\n                    if (this.state.tileMode) {\n                        let index = this.state.tileIndex;\n                        do {\n                            index = (index - 1) % 9;\n                        }\n                        while (this.props.grid[index]);\n                        if (index < 0) index = index + 9;\n                        this.setState({\n                            tileIndex: index\n                        });\n                    }\n                    break;\n                }\n                case 38: {\n                    if (!this.state.tileMode) {\n                        currentIndex--;\n                        if (currentIndex < 0) {\n                            currentIndex = 4;\n                        }\n                        \n                        this.setState({\n                            selectedIndex: currentIndex\n                        });\n                    } else {\n                        let index = this.state.tileIndex;\n                        do {\n                            index = (index - 3) % 9;\n                            if (index < 0) index = index + 9;\n                        }\n                        while (this.props.grid[index]);\n                        this.setState({\n                            tileIndex: index\n                        });\n                    }\n                    break;\n                }\n                case 39: {\n                    if (this.state.tileMode) {\n                        let index = this.state.tileIndex;\n                        do {\n                            index = (index + 1) % 9;\n                        }\n                        while (this.props.grid[index]) ;\n                        this.setState({\n                            tileIndex: index\n                        });\n                    }\n                    break;\n                }\n                case 40: {\n                    if (!this.state.tileMode) {\n                        currentIndex++;\n                        if (currentIndex > 4) {\n                            currentIndex = 0;\n                        }\n                        this.setState({\n                            selectedIndex: currentIndex,\n                        });\n                    } else {\n                        let index = this.state.tileIndex;\n                        do {\n                            index = (index + 3) % 9;\n                        }\n                        while (this.props.grid[index]);\n                        this.setState({\n                            tileIndex: index\n                        });\n                    }\n                    break;\n                }\n                case 27: {\n                    if (this.state.tileMode) {\n                        this.setState({tileMode: false});\n                    }\n                    break;\n                }\n                case 13: {\n                    if (!this.state.tileMode) {\n                        let index = this.props.grid.indexOf(null);\n                        this.setState({\n                            tileIndex: index,\n                            tileMode: true\n                        });\n                    } else {\n                        const selectedIndex = this.state.selectedIndex;\n                        const tileIndex = this.state.tileIndex;                    \n                        this.props.onTileSelect(selectedIndex, tileIndex )\n                        this.setState({\n                            tileMode: false,\n                            selectedIndex: 0\n                        })\n                    }\n                    break;\n                }\n                default: {\n                    console.log(key.keyCode);\n                }\n            }                \n        }\n    }\n\n    render() {\n        let gameInfo;\n        if (this.props.totalCardsPlaced === 9) {\n            if (this.props.player1Score === this.props.player2Score) {\n                gameInfo = 'Game is a Draw!'\n            } else {\n                gameInfo = this.props.player1Score > this.props.player2Score ? 'Player 1 Wins!' : 'Player 2 Wins'\n            }\n        } else {\n            gameInfo = (this.props.turn ? \"Player 1's\" : \"Player 2's\") + ' Turn';\n        }\n        return (\n            <div className=\"board\">\n                <div className=\"first-row\">\n                    <div className=\"board-hand\">\n                        <h3 className=\"player-title\">{'Player 1  [' + this.props.player1Score + ']'}</h3>\n                        <Hand cards={this.props.player1Hand} selectedIndex={this.state.selectedIndex} turn={this.props.turn} side=\"left\"></Hand>\n                    </div>\n                    <div>\n                        <h3 className=\"turn-info\">{(gameInfo)}</h3>\n                        <Grid tiles={this.props.grid} tileMode={this.state.tileMode} selectedIndex={this.state.tileIndex}/>\n                    </div>\n                    <div className=\"board-hand\">\n                        <h3 className=\"player-title\">{'Player 2 [' + this.props.player2Score + ']'} </h3>\n                        <Hand cards={this.props.player2Hand} selectedIndex={this.state.selectedIndex} turn={!this.props.turn} side=\"right\"></Hand>\n                    </div>\n                </div>  \n            </div>\n        )\n    }\n}","let deck1 = [\n    {\n        name: 'Card1',\n        stats: [1, 2, 3, 4],\n        player: true\n      },\n      {\n          name: 'Card2',\n          stats: [1, 2, 3, 4],\n          player: true\n      },\n      {\n          name: 'Card3',\n          stats: [1, 2, 3, 4],\n          player: true\n      },\n      {\n          name: 'Card4',\n          stats: [1, 2, 3, 4],\n          player: true\n      },\n      {\n        name: 'Card5',\n        stats: [5, 5, 5, 5],\n        player: true\n      }\n]\n\nlet deck2 = [\n    {\n        name: 'Card1',\n        stats: [1, 2, 3, 4],\n        player: false\n      },\n      {\n          name: 'Card2',\n          stats: [1, 2, 2, 2],\n          player: false\n      },\n      {\n          name: 'Card3',\n          stats: [4, 3, 2, 1],\n          player: false\n      },\n      {\n          name: 'Card4',\n          stats: [1, 2, 3, 4],\n          player: false\n      },\n      {\n        name: 'Card5',\n        stats: [1, 3, 4, 2],\n        player: false\n      }\n]\n\nconst cards = {\n    deck1: deck1,\n    deck2: deck2\n}\n\nexport default cards;","import React from \"react\";\nimport { Board } from \"../Board\";\nimport cards from \"./cards\";\n\nexport class Game extends React.Component {    \n    constructor(props) {\n        super(props);\n        const player1Cards = cards.deck1.slice();\n        const player2Cards = cards.deck2.slice();\n\n        this.state = {\n            totalCardsPlaced: 0,\n            settings: {\n                combo: false\n            },\n            player1: {\n                score: 5,\n                hand: player1Cards\n            },\n            player2: {\n                score: 5,\n                hand: player2Cards\n            },\n            grid: [\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null,\n                    null, \n                    null, \n                    null\n            ],\n            turn: true,\n        }        \n    }\n\n    onTileSelect(handIndex, tileIndex) {\n        let totalCardsPlaced = this.state.totalCardsPlaced\n        let player1Hand = this.state.player1.hand.slice();\n        let player2Hand = this.state.player2.hand.slice();\n        let newState = {\n            turn: !this.state.turn,\n            totalCardsPlaced: totalCardsPlaced + 1,\n        }\n        const card = this.state.turn ? player1Hand.splice(handIndex, 1)[0] : player2Hand.splice(handIndex, 1)[0];\n        let grid = this.placeCardOnGrid(card, tileIndex);\n\n        if (this.state.turn) {\n            const results = this.performCaptureOperation(this.state.player1.score, this.state.player2.score, tileIndex, this.state.turn, grid);\n            newState.grid = results.grid;\n            newState.player1 = {hand:player1Hand, score: results.score};\n            newState.player2 = {hand: player2Hand, score: results.opponentScore}\n        } else {\n            const results = this.performCaptureOperation(this.state.player2.score, this.state.player1.score, tileIndex, this.state.turn, grid);\n            newState.grid = results.grid;\n            newState.player2 = {hand: player2Hand, score : results.score};\n            newState.player1 = {hand: player1Hand, score: results.opponentScore};\n        }\n        this.setState(newState);\n    }\n\n    /**\n     * Places card in tile index within grid\n     * @param {*} card \n     * @param {number} tileIndex Index within grid (0-8)\n     * @returns {any[]} Returns updated grid\n     */\n    placeCardOnGrid(card, tileIndex) {\n        let grid = this.state.grid.slice();\n        grid[tileIndex] = card;\n        console.log(grid);\n        return grid;\n    }\n\n    /**\n     * Performs the card capture process of opponent cards after placing, \n     * which is performed after placing a card on a tile.\n     * Attempts to capture neighbouring cards from top, left, right and down of the newly placed card. \n     * To 'capture' is to change of the owner of the neighbouring card to the player performing the card placement.\n     * @param {number} score Player's current score/hand total\n     * @param {number} opponentScore Opponent's current score/hand total\n     * @param {number} tileIndex Index of tile that the card was placed on\n     * @param {boolean} player Player that is currently performing the card placement (Player 1: true, Player 2: false)\n     * @param {card[]} grid Current grid of card placements\n     * @returns {{grid: any[], score: number, opponentScore: number}} Object containing updated grid\n     */\n    performCaptureOperation(score, opponentScore, tileIndex, player, grid) {\n        const card = grid[tileIndex];\n        if (!card) {return null;}\n        const neighbourTileIndices = this.getNeighbourTileIndices(tileIndex);\n        let newScore = score;\n        let newOpponentScore = opponentScore;\n        let newGrid = grid.slice();\n        let neighbourCard;\n\n        function capture() {\n            neighbourCard.player = player;\n            newScore++;\n            newOpponentScore--;         \n        }\n\n        if (neighbourTileIndices[0] !== null) {\n            console.log('Tile has top neighbour tile');\n            const index = neighbourTileIndices[0];\n            neighbourCard = newGrid[index];\n            \n            if (neighbourCard && card.stats[0] > neighbourCard.stats[3]) {\n                console.log('Card has greater value than top neighbour');\n                capture();\n            }\n        }\n\n        if (neighbourTileIndices[1] !== null) {\n            console.log('Tile has left neighbour tile');\n            const index = neighbourTileIndices[1];\n            neighbourCard = newGrid[index];\n            if (neighbourCard && card.stats[1] > neighbourCard.stats[2]) {\n                console.log('Card has greater value than left neighbour');\n                capture();\n            }\n        }\n\n        if (neighbourTileIndices[2] !== null) {\n            console.log('Tile has right neighbour tile');\n            const index = neighbourTileIndices[2];\n            neighbourCard = newGrid[index];\n            if (neighbourCard && card.stats[2] > neighbourCard.stats[1]) {\n                console.log('Card has greater value than right neighbour');\n                capture();\n            }\n        }\n\n        if (neighbourTileIndices[3] !== null) {\n            console.log('Tile has down neighbour tile');\n            const index = neighbourTileIndices[3];\n            neighbourCard = newGrid[index];\n            if (neighbourCard && card.stats[3] > neighbourCard.stats[0]) {\n                console.log('Card has greater value than down neighbour');\n                capture();\n            }\n        }\n        \n        return {grid: newGrid, score: newScore, opponentScore: newOpponentScore};\n    }\n\n    /**\n     * Takes in as input a grid tile index and returns an array of [ up, left, right, down ]\n     * A value in the array is null if that neighbour \n     * doesn't exist in the grid (e.g. 0th index has no 'up' or 'left' neighbour)\n     * @param {number} tileIndex\n     */\n    getNeighbourTileIndices(tileIndex) {\n        let returnArray = []\n        if (tileIndex >= 3) {\n            // Up\t\n            returnArray.push(tileIndex-3)\n        } else {\n            returnArray.push(null)\n        }\n        \n        if (tileIndex % 3 > 0) {\n            // Left\n            returnArray.push(tileIndex-1)\n        } else {\n            returnArray.push(null)\n        }\n\n        if (tileIndex % 3 !== 2) {\n            // Right\n            returnArray.push(tileIndex+1)\n        } else {\n            returnArray.push(null)\n        }\n    \n        if (tileIndex < 6) {\n            // Down\n            returnArray.push(tileIndex+3)\n        } else {\n            returnArray.push(null)\n        }\n\n        return returnArray;\n    }\n    \n    render() {\n        return (\n            <Board \n            player1Hand={this.state.player1.hand} \n            player2Hand={this.state.player2.hand}\n            player1Score={this.state.player1.score}\n            player2Score={this.state.player2.score}\n            turn={this.state.turn}\n            grid={this.state.grid}\n            totalCardsPlaced={this.state.totalCardsPlaced}\n            onTileSelect={(handIndex, tileIndex) => {this.onTileSelect(handIndex, tileIndex)}}\n            ></Board>\n        )\n    }\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport { Game } from './components/Game';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      cards: [\n        {\n          name: 'Card1',\n          stats: [1, 2, 3, 4]\n        },\n        {\n          name: 'Card2',\n          stats: [1, 2, 3, 4]\n        },\n        {\n          name: 'Card3',\n          stats: [1, 2, 3, 4]\n        },\n        {\n          name: 'Card4',\n          stats: [1, 2, 3, 4]\n        },\n        {\n          name: 'Card5',\n          stats: [1, 2, 3, 4]\n        }\n      ]\n    }\n  }\n  render() {\n    return (\n      <Game></Game>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}